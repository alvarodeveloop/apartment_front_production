{"version":3,"sources":["components/input/InputComponentRef.jsx","pages/masters/PrecintFormPage.jsx"],"names":["InputFieldRef","React","forwardRef","props","ref","classFormGroup","cols","type","Group","className","required","Label","label","Control","id","name","onChange","handleChange","value","placeholder","readOnly","readonly","step","onKeyUp","handleKeyUp","disabled","Feedback","messageErrors","map","v","i","key","as","multiple","children","rows","PrecintFormPage","useState","validated","setValidated","families","setFamilies","brands","setBrands","models","setModels","units","setUnits","code","id_family","id_brand","id_models","id_measurement_unit","additional_information","data","setData","inputRef","useRef","useEffect","fetchData","current","focus","promises","axios","get","API_URL","match","params","push","Promise","all","then","result","catch","err","response","toast","error","message","e","target","gotBackToTable","history","replace","clearForm","sm","md","lg","xs","onSubmit","form","currentTarget","preventDefault","checkValidity","stopPropagation","objectPost","Object","assign","put","success","post","noValidate","inputCode","inputName","inputFamily","inputModels","inputBrand","inputUnit","inputAdditionalInformation","size","variant","block","onClick","defaultProps"],"mappings":"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","file":"static/js/72.3809652a.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form } from 'react-bootstrap'\r\nimport './InputComponent.css'\r\n\r\nconst InputFieldRef = React.forwardRef( (props,ref) => {\r\n\r\n  const classFormGroup = props.cols ? props.cols : \"col-md-6 col-sm-6\"\r\n  if(props.type !== \"select\" && props.type !== \"textarea\"){\r\n\r\n    return (\r\n      <Form.Group className={classFormGroup}>\r\n        {\r\n          props.required ? (\r\n            <Form.Label className=\"fontBold\"><span className=\"asterisk_red\">*</span>{props.label}</Form.Label>\r\n          ) : (\r\n            <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n          )\r\n        }\r\n        <Form.Control\r\n          ref={ref}\r\n          id={props.name}\r\n          type={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          required={props.required}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          className={props.className ? props.className : ''}\r\n          step={props.step ? props.step : ''}\r\n          onKeyUp={ props.handleKeyUp ? props.handleKeyUp : () => {} }\r\n          className=\"form-control-sm\"\r\n          disabled={props.disabled}\r\n          />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          (\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n          )\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }else if(props.type === \"select\"){\r\n    return(\r\n      <Form.Group className={classFormGroup}>\r\n        {\r\n          props.required ? (\r\n            <Form.Label className=\"fontBold\"><span className=\"asterisk_red\">*</span>{props.label}</Form.Label>\r\n          ) : (\r\n            <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n          )\r\n        }\r\n        <Form.Control\r\n          id={props.name}\r\n          as={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          required={props.required}\r\n          multiple={props.multiple ? props.multiple : false}\r\n          ref={ref ? ref : null}\r\n          className=\"form-control-sm\"\r\n          disabled={props.disabled}\r\n        >\r\n          {props.children}\r\n        </Form.Control>\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          (\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n          )\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }else if(props.type === \"textarea\"){\r\n    return(\r\n      <Form.Group className={classFormGroup}>\r\n        {\r\n          props.required ? (\r\n            <Form.Label className=\"fontBold\"><span className=\"asterisk_red\">*</span>{props.label}</Form.Label>\r\n          ) : (\r\n            <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n          )\r\n        }\r\n        <Form.Control\r\n          id={props.name}\r\n          as={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          required={props.required}\r\n          rows={props.rows ? props.rows : 2}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          onKeyUp={ props.handleKeyUp ? props.handleKeyUp : () => {} }\r\n          ref={ref ? ref : null}\r\n          className=\"form-control-sm\"\r\n          disabled={props.disabled}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          (\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n          )\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }\r\n\r\n})\r\n\r\nInputFieldRef.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  handleKeyUp: PropTypes.func,\r\n  value: PropTypes.any,\r\n  cols: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  errors: PropTypes.array,\r\n  messageErrors: PropTypes.array,\r\n  readonly: PropTypes.bool,\r\n  multiple: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  steps: PropTypes.string,\r\n  disabled: PropTypes.bool\r\n}\r\n\r\nexport default InputFieldRef\r\n","import React, { useState , useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form\r\n} from 'react-bootstrap'\r\nimport InputField from 'components/input/InputComponent'\r\nimport InputFieldRef from 'components/input/InputComponentRef'\r\nimport axios from 'axios'\r\nimport { API_URL } from 'utils/constants'\r\nimport { toast } from 'react-toastify';\r\n\r\nconst PrecintFormPage = (props) => {\r\n\r\n  const [validated, setValidated] = useState(false)\r\n  const [families, setFamilies] = useState([])\r\n  const [brands, setBrands] = useState([])\r\n  const [models, setModels] = useState([])\r\n  const [units, setUnits] = useState([])\r\n  const [data, setData] = useState({\r\n    code:'',\r\n    name: '',\r\n    id_family: '',\r\n    id_brand: '',\r\n    id_models: '',\r\n    id_measurement_unit: '',\r\n    additional_information: '',\r\n  })\r\n\r\n  const inputRef = useRef(null)\r\n  useEffect(() => {\r\n    \r\n    fetchData()\r\n    inputRef.current.focus()\r\n  },[])\r\n\r\n  const fetchData = () => {\r\n    let promises = [\r\n      axios.get(API_URL+'master_families'),\r\n      axios.get(API_URL+'master_brand'),\r\n      axios.get(API_URL+'master_models'),\r\n      axios.get(API_URL+'master_measurement_unit')\r\n    ]\r\n\r\n    if(props.match.params.id){\r\n      promises.push(\r\n        axios.get(API_URL+'master_precint/'+props.match.params.id)\r\n      )\r\n    }\r\n\r\n    Promise.all(promises).then(result => {\r\n\r\n      setFamilies(result[0].data)\r\n      setBrands(result[1].data)\r\n      setModels(result[2].data)\r\n      setUnits(result[3].data)\r\n\r\n      if(result[4]){\r\n        setData({\r\n          code: result[4].data.code,\r\n          name: result[4].data.name,\r\n          id_family: result[4].data.id_family,\r\n          id_brand: result[4].data.id_brand,\r\n          id_models: result[4].data.id_models,\r\n          id_measurement_unit: result[4].data.id_measurement_unit,\r\n          additional_information: result[4].data.additional_information,\r\n        })\r\n      }\r\n\r\n    }).catch(err => {\r\n      if(err.response){\r\n        toast.error(err.response.data.message)\r\n      }else{\r\n        toast.error('Error, contacte con soporte')\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  const onChange = e => {\r\n    setData({...data, [e.target.name]: e.target.value})\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n\r\n    const form = e.currentTarget;\r\n\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      return\r\n    }\r\n\r\n    let objectPost = Object.assign({},data)\r\n\r\n    if(objectPost.id){\r\n      axios.put(API_URL+'master_precint/'+objectPost.id,objectPost).then(result => {\r\n        toast.success('Registro Modificado')\r\n        gotBackToTable()\r\n      }).catch(err => {\r\n        if(err.response){\r\n          toast.error(err.response.data.message)\r\n        }else{\r\n          toast.error('Error, contacte con soporte')\r\n        }\r\n      })\r\n    }else{\r\n      axios.post(API_URL+'master_precint',objectPost).then(result => {\r\n        toast.success('Registro Creado')\r\n        clearForm()\r\n      }).catch(err => {\r\n        if(err.response){\r\n          toast.error(err.response.data.message)\r\n        }else{\r\n          toast.error('Error, contacte con soporte')\r\n        }\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  const gotBackToTable = () => {\r\n    props.history.replace('/masters/precint')\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setData({\r\n      code:'',\r\n      name: '',\r\n      id_family: '',\r\n      id_brand: '',\r\n      id_models: '',\r\n      id_measurement_unit: '',\r\n      additional_information: '',\r\n    })\r\n    setValidated(false)\r\n    inputRef.current.focus()\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"containerDiv\">\r\n        <Col sm={12} md={12} lg={12} xs={12} className=\"text-right\">\r\n          <span className=\"text-danger\">*Campos Obligatorios</span>\r\n          <br/><br/>\r\n        </Col>\r\n        <Col sm={12} md={12} lg={12}>\r\n          <Form onSubmit={handleSubmit} noValidate validated={validated}>\r\n            <Row>\r\n              <InputFieldRef\r\n                {...props.inputCode}\r\n                value={data.code}\r\n                handleChange={onChange}\r\n                ref={inputRef}\r\n              />\r\n              <InputField\r\n                {...props.inputName}\r\n                value={data.name}\r\n                handleChange={onChange}\r\n              />\r\n            </Row>\r\n            <Row>\r\n              <InputField\r\n                {...props.inputFamily}\r\n                value={data.id_family}\r\n                handleChange={onChange}\r\n              >\r\n                <option value=''>--Seleccione--</option>\r\n                {families.map((v,i) => (\r\n                  <option value={v.id} key={i}>{v.name}</option>\r\n                ))}\r\n              </InputField>\r\n              <InputField\r\n                {...props.inputModels}\r\n                value={data.id_models}\r\n                handleChange={onChange}\r\n              >\r\n                <option value=''>--Seleccione--</option>\r\n                {models.map((v,i) => (\r\n                  <option value={v.id} key={i}>{v.name}</option>\r\n                ))}\r\n              </InputField>\r\n              <InputField\r\n                {...props.inputBrand}\r\n                value={data.id_brand}\r\n                handleChange={onChange}\r\n              >\r\n                <option value=''>--Seleccione--</option>\r\n                {brands.map((v,i) => (\r\n                  <option value={v.id} key={i}>{v.name}</option>\r\n                ))}\r\n              </InputField>\r\n            </Row>\r\n            <Row>\r\n              <InputField\r\n                {...props.inputUnit}\r\n                value={data.id_measurement_unit}\r\n                handleChange={onChange}\r\n              >\r\n                <option value=''>--Seleccione--</option>\r\n                {units.map((v,i) => (\r\n                  <option value={v.id} key={i}>{v.name}</option>\r\n                ))}\r\n              </InputField>\r\n              <InputField\r\n                {...props.inputAdditionalInformation}\r\n                value={data.additional_information}\r\n                handleChange={onChange}\r\n              />\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n              <Col sm={4} md={4} lg={4}>\r\n                <Button type=\"submit\" size=\"sm\" variant=\"primary\" block={true}>Guardar</Button>\r\n              </Col>\r\n              <Col sm={4} md={4} lg={4}>\r\n                <Button type=\"submit\" size=\"sm\" variant=\"danger\" block={true} onClick={gotBackToTable}>Volver</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nPrecintFormPage.defaultProps = {\r\n  inputCode: {\r\n    type: 'text',\r\n    required: true,\r\n    name: 'code',\r\n    label : 'Código',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-6 col-md-6 col-lg-6 col-xs-6\"\r\n  },\r\n  inputName: {\r\n    type: 'text',\r\n    required: true,\r\n    name: 'name',\r\n    label : 'Nombre',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-6 col-md-6 col-lg-6 col-xs-6\"\r\n  },\r\n  inputFamily: {\r\n    type: 'select',\r\n    required: true,\r\n    name: 'id_family',\r\n    label : 'Familia',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-4 col-md-4 col-lg-4 col-xs-4\"\r\n  },\r\n  inputModels: {\r\n    type: 'select',\r\n    required: false,\r\n    name: 'id_models',\r\n    label : 'Modelo',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-4 col-md-4 col-lg-4 col-xs-4\"\r\n  },\r\n  inputUnit: {\r\n    type: 'select',\r\n    required: true,\r\n    name: 'id_measurement_unit',\r\n    label : 'Unidad de Medida',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-4 col-md-4 col-lg-4 col-xs-4\"\r\n  },\r\n  inputBrand: {\r\n    type: 'select',\r\n    required: true,\r\n    name: 'id_brand',\r\n    label : 'Marca',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-4 col-md-4 col-lg-4 col-xs-4\"\r\n  },\r\n  inputAdditionalInformation: {\r\n    type: 'textarea',\r\n    required: false,\r\n    name: 'additional_information',\r\n    label : 'Información Adicional',\r\n    messageErrors: [\r\n      'Requerido*'\r\n    ],\r\n    cols:\"col-sm-4 col-md-4 col-lg-4 col-xs-4\"\r\n  },\r\n}\r\n\r\nexport default PrecintFormPage\r\n"],"sourceRoot":""}